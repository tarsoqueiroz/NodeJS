** 02 10 **
https://academind.com/learn/javascript/
https://developer.mozilla.org/en-US/docs/Learn/JavaScript

** 02 11 **
https://developer.mozilla.org/en-US/docs/Learn/JavaScript
https://academind.com/learn/javascript/
https://academind.com/learn/javascript/reference-vs-primitive-values/

** 02 13 **
https://academind.com/learn/javascript/this-keyword-function-references/

** 02 14 **
https://academind.com/learn/javascript/reference-vs-primitive-values/

** 02 15 **
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#

** 02 16 **
https://academind.com/learn/javascript/reference-vs-primitive-values/

** 02 20 **
Template Literals
Seção 2, aula 20
One other feature, we'll use from time to time are template literals:
   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals

It's a different way of writing strings.

Instead of using double or single quotation marks:

   'A String'
   or
   "Another string"

you can use backticks (`)
   `Another way of writing strings`

Now why would we use that way of creating strings?

With that syntax, you can dynamically add data into a string like this:

   const name = "Max";
   const age = 29;
   console.log(`My name is ${name} and I am ${age} years old.`);

This is of course shorter and easier to read than the "old" way of concatenating strings:

   const name = "Max";
   const age = 29;
   console.log("My name is " + name + " and I am " + age + " years old.");

** 02 22 **
Seção 2, aula 22

Useful Resources & Links

Attached, you find the source code for this section.

Useful resources:

MDN JavaScript Tutorial: https://developer.mozilla.org/en-US/docs/Learn/JavaScript

Academind JS Resources: https://academind.com/learn/javascript

Recursos para esta aula
01-core-js-syntax.zip
02-let-and-const.zip
03-arrow-functions.zip
04-objects.zip
05-arrays.zip
06-arrays-and-reference-types.zip
07-spread-and-rest.zip
08-destructuring.zip
09-async-code.zip
